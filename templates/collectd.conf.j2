# {{ ansible_managed }}
##
CollectInternalStats true
Interval 60

###
{% from 'encoder/macros/apache_encode_macro.j2' import apache_encode with context -%}
{# This encoder was taken from
# https://github.com/picotrading/ansible-collectd/blob/master/templates/collectd.conf.j2 #}

{{ apache_encode(
     collectd_config,
     convert_bools=true,
     convert_nums=true,
     quote_all_strings=true) }}
###

# Set WriteThreads to 1 from default 5 in case we run an exec plugin
{% if collectd_plugins_exec %}
WriteThreads    1
{% endif %}

{% if collectd_network_listener %}
# The network plugin receives metrics from *
LoadPlugin network
<Plugin network>
    <Listen "0.0.0.0" "25826">
    </Listen>
    <Listen "::" "25826">
    </Listen>

#   MaxPacketSize 1024
#
#   # proxy setup (client and server as above):
#   Forward true
#
#   # statistics about the network plugin itself
    ReportStats true
#
#   # "garbage collection"
#   CacheFlush 1800
</Plugin>
{% endif %}

{% if collectd_plugins_aggregation %}
<Plugin "aggregation">
    {% if collectd_plugins_cpu %}
    <Aggregation>
        # Aggregate all local CPUs values.
        Plugin "cpu"
        Type "cpu"
        GroupBy "Host"
        GroupBy "TypeInstance"
        CalculateNum false
        CalculateSum false
        CalculateAverage true
        CalculateMinimum true
        CalculateMaximum true
        CalculateStddev false
    </Aggregation>
    {% endif %}
    {% if collectd_plugins_cpufreq %}
    <Aggregation>
        # Aggregate all local cpufreq values.
        Plugin "cpufreq"
        Type "cpufreq"
        GroupBy "Host"
        CalculateNum false
        CalculateSum false
        CalculateAverage true
        CalculateMinimum true
        CalculateMaximum true
        CalculateStddev false
    </Aggregation>
    {% endif %}
</Plugin>
{% endif %}

{% if collectd_plugins_interface %}
<Plugin interface>
   Interface "lo"
   IgnoreSelected true
</Plugin>
{% endif %}

{% if collectd_plugins_processes %}
<Plugin processes>
   Process "slurmstepd"
</Plugin>
{% endif %}

{% if collectd_plugins_exec %}
  {% if collectd_ipmitool %}
    {% if ansible_virtualization_role != "guest" %}
# If not a VM
<Plugin exec>
	Exec "nobody" "/usr/local/bin/ipmitool.sh"
</Plugin>
    {% endif %}
  {% endif %}
{% endif %}

{% if collectd_tsdb_writer %}
# This write_tsdb plugin writes to influxdb
LoadPlugin write_tsdb
<Plugin write_tsdb>
       <Node>
               Host "{{ collectd_tsdb_host }}"
               Port "{{ collectd_tsdb_port }}"
               HostTags "{{ collectd_tsdb_tags }}"
               StoreRates true
               AlwaysAppendDS false
       </Node>
</Plugin>
{% endif %}

####### Chains

LoadPlugin match_regex
LoadPlugin target_replace

{% if collectd_precache == true %}
PreCacheChain "PreCache"
{% if collectd_set_graphite_prefix %}
<Chain "PreCache">
    # Replace dots in FQDN and prepend a Graphite prefix to the hostname.
    <Rule "set_graphite_prefix">
        <Match "regex">
            # Avoid adding the prefix a second time for local aggregated data.
            Host "{{ collectd_graphite_prefix_1 }}"
            Invert true
        </Match>
        <Target "replace">
        # No global replace available, so we need to run same regex multiple times.
        Host "\\." "_"
        Host "\\." "_"
        Host "\\." "_"
        Host "\\." "_"
        Host "^" "{{ collectd_graphite_prefix_2 }}"
        </Target>
    </Rule>
</Chain>
{% endif %}



{% if collectd_plugins_processes %}
<Chain "PreCache">
    <Rule "no_fork_rate">
        # collectd.processes.fork_rate
        <Match "regex">
            Plugin "processes"
        </Match>
        <Match "regex">
            Type "fork_rate"
        </Match>
        Target "stop"
    </Rule>
    <Rule "no_ps_code">
        # collectd.processes-slurmstepd.ps_code
        <Match "regex">
            Plugin "processes"
        </Match>
        <Match "regex">
            Type "ps_code"
        </Match>
        Target "stop"
    </Rule>
    <Rule "no_ps_data">
        # collectd.processes-slurmstepd.ps_data
        <Match "regex">
            Plugin "processes"
        </Match>
        <Match "regex">
            Type "ps_data"
        </Match>
        Target "stop"
    </Rule>
    <Rule "no_ps_vm">
        # collectd.processes-slurmstepd.ps_vm
        <Match "regex">
            Plugin "processes"
        </Match>
        <Match "regex">
            Type "ps_vm"
        </Match>
        Target "stop"
    </Rule>
    <Rule "no_ps_stacksize">
        # collectd.processes-slurmstepd.ps_stacksize
        <Match "regex">
            Plugin "processes"
        </Match>
        <Match "regex">
            Type "ps_stacksize"
        </Match>
        Target "stop"
    </Rule>
    <Rule "no_ps_rss">
        # collectd.processes-slurmstepd.ps_rss
        <Match "regex">
            Plugin "processes"
        </Match>
        <Match "regex">
            Type "ps_rss"
        </Match>
        Target "stop"
    </Rule>
    <Rule "no_pagefaults_">
        # collectd.processes-slurmstepd.ps_pagefaults.minflt
        <Match "regex">
            Plugin "processes"
        </Match>
        <Match "regex">
            Type ".minflt"
        </Match>
        Target "stop"
    </Rule>
    <Rule "no_pagefaults_">
        # collectd.processes-slurmstepd.ps_pagefaults.maxflt
        <Match "regex">
            Plugin "processes"
        </Match>
        <Match "regex">
            Type "ps_pagefaults"
        </Match>
        Target "stop"
    </Rule>
    <Rule "no_ps_states_">
        # collectd.processes.ps_state.*
        <Match "regex">
            Plugin "processes"
        </Match>
        <Match "regex">
            Type ".*ps_state.*"
        </Match>
        Target "stop"
    </Rule>
    <Rule "no_disk2">
        # collectd.processes-slurmstepd.ps_disk_octets.write
        <Match "regex">
            Plugin "processes"
        </Match>
        <Match "regex">
            Type "ps_disk_octets"
        </Match>
        Target "stop"
    </Rule>
    <Rule "no_disk3">
        # collectd.processes-slurmstepd.ps_disk_ops.write
        <Match "regex">
            Plugin "processes"
        </Match>
        <Match "regex">
            Type "ps_disk_ops"
        </Match>
        Target "stop"
    </Rule>
    <Rule "no_cpu">
        # collectd.processes-slurmstepd.ps_cputime
        <Match "regex">
            Plugin "processes"
        </Match>
        <Match "regex">
            Type "ps_cputime"
        </Match>
        Target "stop"
    </Rule>
</Chain>
{% endif %}
{% endif %}

{% if collectd_plugins_aggregation and collectd_plugins_cpu %}
PostCacheChain "PostCache"
<Chain "PostCache">
    {% if collectd_plugins_cpu %}
        <Rule>
            <Match "regex">
                Plugin "^cpu$"
            </Match>
            <Target "write">
                Plugin "aggregation"
            </Target>
            Target "stop"
        </Rule>
    {% endif %}
    {% if collectd_plugins_cpufreq %}
        <Rule>
            <Match "regex">
                Plugin "^cpufreq$"
            </Match>
            <Target "write">
                Plugin "aggregation"
            </Target>
            Target "stop"
        </Rule>
    {% endif %}
        # Pass all other local values as they are.
        <Target write>
        {% if collectd_tsdb_writer == True %}
	    # https://collectd.org/wiki/index.php/Plugin:Write_TSDB
            Plugin "write_tsdb/{{ collectd_tsdb_host }}/{{ collectd_tsdb_port }}"
	{% elif collectd_network_server == True %}
	    Plugin "network"
 	{% endif %}
        </Target>
</Chain>
{% endif %}

